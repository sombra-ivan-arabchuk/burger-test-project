{"version":3,"sources":["hooks/useAuth.tsx","components/NavBar/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["authContext","createContext","user","name","email","token","signOut","console","log","signIn","Promise","resolve","ProvideAuth","children","auth","useState","setToken","setUser","useEffect","_onInit","storedToken","localStorage","getItem","storedUser","JSON","parse","localAuthRefresh","_onError","err","window","gapi","load","auth2","init","process","then","a","async","getAuthInstance","googleUser","profile","getBasicProfile","profileData","getGivenName","getEmail","idToken","getAuthResponse","id_token","setItem","stringify","clear","useProvideAuth","Provider","value","useStyles","makeStyles","theme","grow","flexGrow","appBar","background","title","display","breakpoints","up","sectionDesktop","sectionMobile","NavBar","classes","useContext","AccessBlock","Button","color","onClick","className","AppBar","position","Toolbar","Typography","variant","noWrap","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcadce00.chunk.js","sourcesContent":["import React, { useState, useContext, createContext, useEffect } from 'react';\n\ninterface ProvideAuthProps {\n  children: React.ReactChild;\n}\n\nexport interface AuthError {\n  error: string;\n  details: string;\n}\n\nexport interface User {\n  name: string;\n  email: string;\n}\n\nexport interface UseAuthProps {\n  user: User;\n  token: string;\n  signIn: (e: React.MouseEvent) => Promise<string>;\n  signOut: (e: React.MouseEvent) => void;\n}\n\nconst authContext = createContext<UseAuthProps>({\n  user: { name: '', email: '' },\n  token: '',\n  signOut: () => console.log(),\n  signIn: () => Promise.resolve(''),\n});\n\nconst clientId = 'client_id';\n\n// Provider component that wraps your app and makes auth object available\n// to any child component that calls useAuth().\nexport function ProvideAuth({\n  children,\n}: ProvideAuthProps): React.ReactElement {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = (): UseAuthProps => useContext(authContext);\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth(): UseAuthProps {\n  const [token, setToken] = useState();\n  const [user, setUser] = useState({ name: '', email: '' });\n\n  const signIn = async (): Promise<string> => {\n    const auth2 = window.gapi.auth2.getAuthInstance();\n    const googleUser = await auth2.signIn();\n    const profile = googleUser.getBasicProfile();\n    const profileData = {\n      name: profile.getGivenName(),\n      email: profile.getEmail(),\n    };\n    const idToken = googleUser.getAuthResponse().id_token;\n    localStorage.setItem('token', idToken);\n    localStorage.setItem('user', JSON.stringify(profileData));\n    setToken(idToken);\n    setUser(profileData);\n    return token;\n  };\n\n  const signOut = (): void => {\n    localStorage.clear();\n    setToken(false);\n    setUser({ name: '', email: '' });\n  };\n\n  const localAuthRefresh = (): void => {\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (storedToken) {\n      setToken(storedToken);\n    } else {\n      setToken(false);\n    }\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  };\n\n  // Set token and user on mount\n  useEffect(() => {\n    const _onInit = (): void => {\n      localAuthRefresh();\n    };\n    const _onError = (err: AuthError): void => {\n      console.log('error', err);\n    };\n    window.gapi.load('auth2', function() {\n      window.gapi.auth2\n        .init({ [clientId]: process.env.REACT_APP_GOOGLE_CLIENT_ID })\n        .then(_onInit, _onError);\n    });\n    // we include the empty array which means this only runs once on component mount\n    // since we are simply getting an item from AsyncStorage that is sufficient for now\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Return the token, user object, and auth methods\n  return {\n    token,\n    user,\n    signIn,\n    signOut,\n  };\n}\n","import React from 'react';\nimport { AppBar, Button, makeStyles, Toolbar } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { useAuth } from '../../hooks/useAuth';\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow: 1,\n  },\n  appBar: {\n    background: 'rgb(255,141,85)',\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n    },\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n}));\n \nconst NavBar = (): React.ReactElement => {\n  const classes = useStyles();\n  const { signIn, signOut, user } = useAuth();\n\n  const AccessBlock =\n    user.name === '' ? (\n      <Button color=\"inherit\" onClick={signIn}>\n        Login\n      </Button>\n    ) : (\n      <Button color=\"inherit\" onClick={signOut}>\n        Logout\n      </Button>\n    );\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Burger-App\n          </Typography>\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>{AccessBlock}</div>\n          <div className={classes.sectionMobile}>{AccessBlock}</div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport './App.css';\nimport { ProvideAuth } from './hooks/useAuth';\nimport NavBar from './components/NavBar/NavBar';\n\nconst App = (): React.ReactElement => {\n  return (\n    <div>\n      <ProvideAuth>\n        <>\n          <NavBar />\n        </>\n      </ProvideAuth>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}